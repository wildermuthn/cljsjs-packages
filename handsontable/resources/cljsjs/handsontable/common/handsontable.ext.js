// Generated via http://jmmk.github.io/javascript-externs-generator/
// Loaded JavaScripts:
// https://cdn.jsdelivr.net/gh/handsontable/handsontable@master/dist/handsontable.full.min.js
// extern the 'Handsontable' object

var Handsontable = {
  "AutocompleteCell": {
    "editor": {
      "sortByRelevance": function () {}
    },
    "renderer": function () {},
    "validator": function () {}
  },
  "AutocompleteRenderer": function () {},
  "AutocompleteValidator": function () {},
  "BaseRenderer": function () {},
  "CheckboxCell": {
    "editor": function () {},
    "renderer": function () {}
  },
  "CheckboxRenderer": function () {},
  "Core": function () {},
  "CustomBorders": function () {},
  "DateCell": {
    "editor": function () {},
    "renderer": function () {},
    "validator": function () {}
  },
  "DateValidator": function () {},
  "DefaultSettings": function () {},
  "Dom": {
    "HTML_CHARACTERS": {},
    "addClass": function () {},
    "addEvent": function () {},
    "closest": function () {},
    "closestDown": function () {},
    "empty": function () {},
    "fastInnerHTML": function () {},
    "fastInnerText": function () {},
    "getCaretPosition": function () {},
    "getComputedStyle": function () {},
    "getCssTransform": function () {},
    "getParent": function () {},
    "getScrollLeft": function () {},
    "getScrollTop": function () {},
    "getScrollableElement": function () {},
    "getScrollbarWidth": function () {},
    "getSelectionEndPosition": function () {},
    "getSelectionText": function () {},
    "getStyle": function () {},
    "getTrimmingContainer": function () {},
    "getWindowScrollLeft": function () {},
    "getWindowScrollTop": function () {},
    "hasClass": function () {},
    "hasHorizontalScrollbar": function () {},
    "hasVerticalScrollbar": function () {},
    "index": function () {},
    "innerHeight": function () {},
    "innerWidth": function () {},
    "isChildOf": function () {},
    "isChildOfWebComponentTable": function () {},
    "isImmediatePropagationStopped": function () {},
    "isInput": function () {},
    "isLeftClick": function () {},
    "isOutsideInput": function () {},
    "isRightClick": function () {},
    "isVisible": function () {},
    "offset": function () {},
    "outerHeight": function () {},
    "outerWidth": function () {},
    "overlayContainsElement": function () {},
    "pageX": function () {},
    "pageY": function () {},
    "polymerUnwrap": function () {},
    "polymerWrap": function () {},
    "removeClass": function () {},
    "removeEvent": function () {},
    "removeTextNodes": function () {},
    "resetCssTransform": function () {},
    "setCaretPosition": function () {},
    "setOverlayPosition": function () {},
    "stopImmediatePropagation": function () {},
    "stopPropagation": function () {}
  },
  "DropdownCell": {
    "editor": {
      "sortByRelevance": function () {}
    },
    "renderer": function () {},
    "validator": function () {}
  },
  "EditorManager": function () {},
  "EditorState": {
    "EDITING": {},
    "FINISHED": {},
    "VIRGIN": {},
    "WAITING": {}
  },
  "HandsontableCell": {
    "editor": function () {},
    "renderer": function () {}
  },
  "HtmlRenderer": function () {},
  "MergeCells": function () {},
  "NumericCell": {
    "dataType": {},
    "editor": function () {},
    "renderer": function () {},
    "validator": function () {}
  },
  "NumericRenderer": function () {},
  "NumericValidator": function () {},
  "PasswordCell": {
    "copyable": {},
    "editor": function () {},
    "renderer": function () {}
  },
  "PasswordRenderer": function () {},
  "Search": {
    "DEFAULT_CALLBACK": function () {},
    "DEFAULT_QUERY_METHOD": function () {},
    "DEFAULT_SEARCH_RESULT_CLASS": {},
    "global": {
      "getDefaultCallback": function () {},
      "getDefaultQueryMethod": function () {},
      "getDefaultSearchResultClass": function () {},
      "setDefaultCallback": function () {},
      "setDefaultQueryMethod": function () {},
      "setDefaultSearchResultClass": function () {}
    }
  },
  "SearchCellDecorator": function () {},
  "TableView": function () {},
  "TextCell": {
    "editor": function () {},
    "renderer": function () {}
  },
  "TextRenderer": function () {},
  "TimeCell": {
    "editor": function () {},
    "renderer": function () {},
    "validator": function () {}
  },
  "TimeValidator": function () {},
  "UndoRedo": {
    "Action": function () {},
    "CellAlignmentAction": function () {},
    "ChangeAction": function () {},
    "CreateColumnAction": function () {},
    "CreateRowAction": function () {},
    "FiltersAction": function () {},
    "RemoveColumnAction": function () {},
    "RemoveRowAction": function () {},
    "RowMoveAction": function () {}
  },
  "activeGuid": {},
  "buildDate": {},
  "cellLookup": {
    "validator": {
      "autocomplete": function () {},
      "numeric": function () {}
    }
  },
  "cellTypes": {
    "autocomplete": {
      "editor": {
        "sortByRelevance": function () {}
      },
      "renderer": function () {},
      "validator": function () {}
    },
    "checkbox": {
      "editor": function () {},
      "renderer": function () {}
    },
    "date": {
      "editor": function () {},
      "renderer": function () {},
      "validator": function () {}
    },
    "dropdown": {
      "editor": {
        "sortByRelevance": function () {}
      },
      "renderer": function () {},
      "validator": function () {}
    },
    "handsontable": {
      "editor": function () {},
      "renderer": function () {}
    },
    "numeric": {
      "dataType": {},
      "editor": function () {},
      "renderer": function () {},
      "validator": function () {}
    },
    "password": {
      "copyable": {},
      "editor": function () {},
      "renderer": function () {}
    },
    "text": {
      "editor": function () {},
      "renderer": function () {}
    },
    "time": {
      "editor": function () {},
      "renderer": function () {},
      "validator": function () {}
    }
  },
  "countEventManagerListeners": {},
  "dom": {
    "HTML_CHARACTERS": {},
    "addClass": function () {},
    "addEvent": function () {},
    "closest": function () {},
    "closestDown": function () {},
    "empty": function () {},
    "fastInnerHTML": function () {},
    "fastInnerText": function () {},
    "getCaretPosition": function () {},
    "getComputedStyle": function () {},
    "getCssTransform": function () {},
    "getParent": function () {},
    "getScrollLeft": function () {},
    "getScrollTop": function () {},
    "getScrollableElement": function () {},
    "getScrollbarWidth": function () {},
    "getSelectionEndPosition": function () {},
    "getSelectionText": function () {},
    "getStyle": function () {},
    "getTrimmingContainer": function () {},
    "getWindowScrollLeft": function () {},
    "getWindowScrollTop": function () {},
    "hasClass": function () {},
    "hasHorizontalScrollbar": function () {},
    "hasVerticalScrollbar": function () {},
    "index": function () {},
    "innerHeight": function () {},
    "innerWidth": function () {},
    "isChildOf": function () {},
    "isChildOfWebComponentTable": function () {},
    "isImmediatePropagationStopped": function () {},
    "isInput": function () {},
    "isLeftClick": function () {},
    "isOutsideInput": function () {},
    "isRightClick": function () {},
    "isVisible": function () {},
    "offset": function () {},
    "outerHeight": function () {},
    "outerWidth": function () {},
    "overlayContainsElement": function () {},
    "pageX": function () {},
    "pageY": function () {},
    "polymerUnwrap": function () {},
    "polymerWrap": function () {},
    "removeClass": function () {},
    "removeEvent": function () {},
    "removeTextNodes": function () {},
    "resetCssTransform": function () {},
    "setCaretPosition": function () {},
    "setOverlayPosition": function () {},
    "stopImmediatePropagation": function () {},
    "stopPropagation": function () {}
  },
  "editors": {
    "AutocompleteEditor": {
      "sortByRelevance": function () {}
    },
    "BaseEditor": function () {},
    "CheckboxEditor": function () {},
    "DateEditor": function () {},
    "DropdownEditor": {
      "sortByRelevance": function () {}
    },
    "HandsontableEditor": function () {},
    "MobileEditor": function () {},
    "NumericEditor": function () {},
    "PasswordEditor": function () {},
    "SelectEditor": function () {},
    "TextEditor": function () {},
    "getEditor": function () {},
    "registerEditor": function () {}
  },
  "eventManager": function () {},
  "helper": {
    "KEY_CODES": {
      "A": {},
      "ALT": {},
      "ARROW_DOWN": {},
      "ARROW_LEFT": {},
      "ARROW_RIGHT": {},
      "ARROW_UP": {},
      "BACKSPACE": {},
      "C": {},
      "CAPS_LOCK": {},
      "COMMA": {},
      "COMMAND_LEFT": {},
      "COMMAND_RIGHT": {},
      "CONTROL_LEFT": {},
      "DELETE": {},
      "END": {},
      "ENTER": {},
      "ESCAPE": {},
      "F1": {},
      "F10": {},
      "F11": {},
      "F12": {},
      "F2": {},
      "F3": {},
      "F4": {},
      "F5": {},
      "F6": {},
      "F7": {},
      "F8": {},
      "F9": {},
      "HOME": {},
      "INSERT": {},
      "MOUSE_LEFT": {},
      "MOUSE_MIDDLE": {},
      "MOUSE_RIGHT": {},
      "PAGE_DOWN": {},
      "PAGE_UP": {},
      "PERIOD": {},
      "SHIFT": {},
      "SPACE": {},
      "TAB": {},
      "V": {},
      "X": {}
    },
    "arrayAvg": function () {},
    "arrayEach": function () {},
    "arrayFilter": function () {},
    "arrayFlatten": function () {},
    "arrayIncludes": function () {},
    "arrayMap": function () {},
    "arrayMax": function () {},
    "arrayMin": function () {},
    "arrayReduce": function () {},
    "arraySum": function () {},
    "arrayUnique": function () {},
    "cancelAnimationFrame": function () {},
    "cellMethodLookupFactory": function () {},
    "clone": function () {},
    "columnFactory": function () {},
    "createEmptySpreadsheetData": function () {},
    "createObjectPropListener": function () {},
    "createSpreadsheetData": function () {},
    "createSpreadsheetObjectData": function () {},
    "curry": function () {},
    "curryRight": function () {},
    "debounce": function () {},
    "deepClone": function () {},
    "deepExtend": function () {},
    "deepObjectSize": function () {},
    "defineGetter": function () {},
    "duckSchema": function () {},
    "endsWith": function () {},
    "equalsIgnoreCase": function () {},
    "extend": function () {},
    "extendArray": function () {},
    "getComparisonFunction": function () {},
    "getNormalizedDate": function () {},
    "getProperty": function () {},
    "getPrototypeOf": function () {},
    "hasCaptionProblem": function () {},
    "inherit": function () {},
    "isChrome": function () {},
    "isCtrlKey": function () {},
    "isDefined": function () {},
    "isEmpty": function () {},
    "isFunction": function () {},
    "isIE8": function () {},
    "isIE9": function () {},
    "isKey": function () {},
    "isMetaKey": function () {},
    "isMobileBrowser": function () {},
    "isNumeric": function () {},
    "isObject": function () {},
    "isObjectEquals": function () {},
    "isPercentValue": function () {},
    "isPrintableChar": function () {},
    "isSafari": function () {},
    "isTouchSupported": function () {},
    "isUndefined": function () {},
    "isWebComponentSupportedNatively": function () {},
    "mixin": function () {},
    "objectEach": function () {},
    "padStart": function () {},
    "partial": function () {},
    "pipe": function () {},
    "pivot": function () {},
    "proxy": function () {},
    "randomString": function () {},
    "rangeEach": function () {},
    "rangeEachReverse": function () {},
    "requestAnimationFrame": function () {},
    "spreadsheetColumnIndex": function () {},
    "spreadsheetColumnLabel": function () {},
    "startsWith": function () {},
    "stringify": function () {},
    "stripTags": function () {},
    "substitute": function () {},
    "throttle": function () {},
    "throttleAfterHits": function () {},
    "to2dArray": function () {},
    "toUpperCaseFirst": function () {},
    "translateRowsToColumns": function () {},
    "valueAccordingPercent": function () {}
  },
  "hooks": {
    "add": function () {},
    "createEmptyBucket": function () {},
    "deregister": function () {},
    "destroy": function () {},
    "getBucket": function () {},
    "getRegistered": function () {},
    "globalBucket": {
      "afterAddChild": {},
      "afterBeginEditing": {},
      "afterCellMetaReset": {},
      "afterChange": {},
      "afterChangesObserved": {},
      "afterColumnMove": {},
      "afterColumnResize": {},
      "afterColumnSort": {},
      "afterContextMenuDefaultOptions": {},
      "afterContextMenuHide": {},
      "afterContextMenuShow": {},
      "afterCopy": {},
      "afterCopyLimit": {},
      "afterCreateCol": {},
      "afterCreateRow": {},
      "afterCut": {},
      "afterDeselect": {},
      "afterDestroy": {},
      "afterDetachChild": {},
      "afterDocumentKeyDown": {},
      "afterDropdownMenuDefaultOptions": {},
      "afterDropdownMenuHide": {},
      "afterDropdownMenuShow": {},
      "afterFilter": {},
      "afterGetCellMeta": {},
      "afterGetColHeader": {},
      "afterGetColumnHeaderRenderers": {},
      "afterGetRowHeader": {},
      "afterGetRowHeaderRenderers": {},
      "afterInit": {},
      "afterIsMultipleSelection": {},
      "afterLoadData": {},
      "afterModifyTransformEnd": {},
      "afterModifyTransformStart": {},
      "afterMomentumScroll": {},
      "afterOnCellCornerDblClick": {},
      "afterOnCellCornerMouseDown": {},
      "afterOnCellMouseDown": {},
      "afterOnCellMouseOut": {},
      "afterOnCellMouseOver": {},
      "afterPaste": {},
      "afterPluginsInitialized": {},
      "afterRedo": {},
      "afterRemoveCol": {},
      "afterRemoveRow": {},
      "afterRender": {},
      "afterRenderer": {},
      "afterRowMove": {},
      "afterRowResize": {},
      "afterScrollHorizontally": {},
      "afterScrollVertically": {},
      "afterSelection": {},
      "afterSelectionByProp": {},
      "afterSelectionEnd": {},
      "afterSelectionEndByProp": {},
      "afterSetCellMeta": {},
      "afterSetDataAtCell": {},
      "afterSetDataAtRowProp": {},
      "afterTrimRow": {},
      "afterUndo": {},
      "afterUntrimRow": {},
      "afterUpdateSettings": {},
      "afterValidate": {},
      "afterViewportColumnCalculatorOverride": {},
      "afterViewportRowCalculatorOverride": {},
      "beforeAddChild": {},
      "beforeAutofill": {},
      "beforeAutofillInsidePopulate": {},
      "beforeCellAlignment": {},
      "beforeChange": {},
      "beforeChangeRender": {},
      "beforeColumnMove": {},
      "beforeColumnResize": {},
      "beforeColumnSort": {},
      "beforeContextMenuSetItems": {},
      "beforeCopy": {},
      "beforeCreateCol": {},
      "beforeCreateRow": {},
      "beforeCut": {},
      "beforeDetachChild": {},
      "beforeDrawBorders": {},
      "beforeDropdownMenuSetItems": {},
      "beforeFilter": {},
      "beforeGetCellMeta": {},
      "beforeInit": {},
      "beforeInitWalkontable": {},
      "beforeKeyDown": {},
      "beforeOnCellMouseDown": {},
      "beforeOnCellMouseOut": {},
      "beforeOnCellMouseOver": {},
      "beforePaste": {},
      "beforeRedo": {},
      "beforeRemoveCol": {},
      "beforeRemoveRow": {},
      "beforeRender": {},
      "beforeRenderer": {},
      "beforeRowMove": {},
      "beforeRowResize": {},
      "beforeSetRangeEnd": {},
      "beforeSetRangeStart": {},
      "beforeStretchingColumnWidth": {},
      "beforeTouchScroll": {},
      "beforeUndo": {},
      "beforeValidate": {},
      "beforeValueRender": {},
      "construct": {},
      "hiddenColumn": {},
      "hiddenRow": {},
      "init": {},
      "manualRowHeights": {},
      "modifyAutofillRange": {},
      "modifyCol": {},
      "modifyColHeader": {},
      "modifyColWidth": {},
      "modifyColumnHeaderHeight": {},
      "modifyCopyableRange": {},
      "modifyData": {},
      "modifyRow": {},
      "modifyRowData": {},
      "modifyRowHeader": {},
      "modifyRowHeaderWidth": {},
      "modifyRowHeight": {},
      "modifyTransformEnd": {},
      "modifyTransformStart": {},
      "persistentStateLoad": {},
      "persistentStateReset": {},
      "persistentStateSave": {},
      "skipLengthCache": {},
      "unmodifyCol": {},
      "unmodifyRow": {}
    },
    "has": function () {},
    "isRegistered": function () {},
    "once": function () {},
    "register": function () {},
    "remove": function () {},
    "run": function () {}
  },
  "packageName": {},
  "plugins": {
    "AutoColumnSize": {
      "CALCULATION_STEP": {},
      "SYNC_CALCULATION_LIMIT": {}
    },
    "AutoRowSize": {
      "CALCULATION_STEP": {},
      "SYNC_CALCULATION_LIMIT": {}
    },
    "Autofill": function () {},
    "BasePlugin": function () {},
    "ColumnSorting": function () {},
    "Comments": function () {},
    "ContextMenu": {
      "DEFAULT_ITEMS": {},
      "SEPARATOR": {
        "name": {}
      }
    },
    "ContextMenuCopyPaste": function () {},
    "DragToScroll": function () {},
    "ManualColumnFreeze": function () {},
    "ManualColumnMove": function () {},
    "ManualColumnResize": function () {},
    "ManualRowMove": function () {},
    "ManualRowResize": function () {},
    "MultipleSelectionHandles": function () {},
    "ObserveChanges": function () {},
    "TouchScroll": function () {},
    "registerPlugin": function () {},
    "utils": {
      "Cursor": function () {}
    }
  },
  "renderers": {
    "AutocompleteRenderer": function () {},
    "BaseRenderer": function () {},
    "CheckboxRenderer": function () {},
    "HtmlRenderer": function () {},
    "NumericRenderer": function () {},
    "PasswordRenderer": function () {},
    "TextRenderer": function () {},
    "cellDecorator": function () {},
    "getRenderer": function () {},
    "registerRenderer": function () {}
  },
  "utils": {
    "GhostTable": function () {},
    "Hooks": function () {},
    "Interval": {
      "create": function () {}
    },
    "LinkedList": function () {},
    "ManualColumnMoveColumnsMapper": {
      "MIXINS": {}
    },
    "ManualRowMoveRowsMapper": {
      "MIXINS": {}
    },
    "NodeStructure": function () {},
    "RecordTranslator": function () {},
    "RecordTranslatorUtils": {
      "getTranslator": function () {},
      "registerIdentity": function () {}
    },
    "SamplesGenerator": {
      "SAMPLE_COUNT": {}
    },
    "arrayMapper": {
      "_arrayMap": {},
      "clearMap": function () {},
      "getIndexByValue": function () {},
      "getValueByIndex": function () {},
      "insertItems": function () {},
      "removeItems": function () {},
      "shiftItems": function () {},
      "unshiftItems": function () {}
    },
    "localHooks": {
      "_localHooks": {},
      "addLocalHook": function () {},
      "clearLocalHooks": function () {},
      "runLocalHooks": function () {}
    },
    "mergeSort": function () {}
  },
  "version": {}
};
Handsontable.AutocompleteCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "allowKeyEventPropagation": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "flipDropdown": function () {},
  "flipDropdownIfNeeded": function () {},
  "focus": function () {},
  "getDropdownHeight": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "highlightBestMatchingChoice": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "limitDropdownIfNeeded": function () {},
  "open": function () {},
  "prepare": function () {},
  "queryChoices": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setDropdownHeight": function () {},
  "setValue": function () {},
  "unflipDropdown": function () {},
  "updateChoicesList": function () {},
  "updateDropdownHeight": function () {}
};
Handsontable.CheckboxCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.DateCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "destroyElements": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getDatePickerConfig": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "hideDatepicker": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {},
  "showDatepicker": function () {}
};
Handsontable.DefaultSettings.prototype = {
  "allowEmpty": function () {},
  "allowHtml": function () {},
  "allowInsertColumn": function () {},
  "allowInsertRow": function () {},
  "allowInvalid": function () {},
  "allowRemoveColumn": function () {},
  "allowRemoveRow": function () {},
  "autoColumnSize": function () {},
  "autoComplete": function () {},
  "autoRowSize": function () {},
  "autoWrapCol": function () {},
  "autoWrapRow": function () {},
  "bindRowsWithHeaders": function () {},
  "cell": function () {},
  "cells": function () {},
  "checkedTemplate": function () {},
  "className": function () {},
  "colHeaders": function () {},
  "colWidths": function () {},
  "collapsibleColumns": function () {},
  "columnHeaderHeight": function () {},
  "columnSorting": function () {},
  "columnSummary": function () {},
  "columns": function () {},
  "commentedCellClassName": function () {},
  "comments": function () {},
  "contextMenu": function () {},
  "contextMenuCopyPaste": function () {},
  "copyColsLimit": function () {},
  "copyPaste": function () {},
  "copyRowsLimit": function () {},
  "copyable": function () {},
  "correctFormat": function () {},
  "currentColClassName": function () {},
  "currentHeaderClassName": function () {},
  "currentRowClassName": function () {},
  "customBorders": function () {},
  "data": function () {},
  "dataSchema": function () {},
  "dateFormat": function () {},
  "debug": function () {},
  "defaultDate": function () {},
  "disableVisualSelection": function () {},
  "dropdownMenu": function () {},
  "editor": function () {},
  "enterBeginsEditing": function () {},
  "enterMoves": function () {},
  "fillHandle": function () {},
  "filter": function () {},
  "filteringCaseSensitive": function () {},
  "filters": function () {},
  "fixedColumnsLeft": function () {},
  "fixedRowsBottom": function () {},
  "fixedRowsTop": function () {},
  "format": function () {},
  "formulas": function () {},
  "fragmentSelection": function () {},
  "ganttChart": function () {},
  "headerTooltips": function () {},
  "height": function () {},
  "hiddenColumns": function () {},
  "hiddenRows": function () {},
  "invalidCellClassName": function () {},
  "isEmptyCol": function () {},
  "isEmptyRow": function () {},
  "label": function () {},
  "language": function () {},
  "manualColumnFreeze": function () {},
  "manualColumnMove": function () {},
  "manualColumnResize": function () {},
  "manualRowMove": function () {},
  "manualRowResize": function () {},
  "maxCols": function () {},
  "maxRows": function () {},
  "mergeCells": function () {},
  "minCols": function () {},
  "minRows": function () {},
  "minSpareCols": function () {},
  "minSpareRows": function () {},
  "multiSelect": function () {},
  "nestedHeaders": function () {},
  "noWordWrapClassName": function () {},
  "observeChanges": function () {},
  "observeDOMVisibility": function () {},
  "outsideClickDeselects": function () {},
  "pasteMode": function () {},
  "persistentState": function () {},
  "placeholder": function () {},
  "placeholderCellClassName": function () {},
  "preventOverflow": function () {},
  "readOnly": function () {},
  "readOnlyCellClassName": function () {},
  "renderAllRows": function () {},
  "renderer": function () {},
  "rowHeaderWidth": function () {},
  "rowHeaders": function () {},
  "rowHeights": function () {},
  "search": function () {},
  "selectOptions": function () {},
  "settings": function () {},
  "skipColumnOnPaste": function () {},
  "sortByRelevance": function () {},
  "sortFunction": function () {},
  "sortIndicator": function () {},
  "source": function () {},
  "startCols": function () {},
  "startRows": function () {},
  "stretchH": function () {},
  "strict": function () {},
  "tabMoves": function () {},
  "tableClassName": function () {},
  "title": function () {},
  "trimDropdown": function () {},
  "trimRows": function () {},
  "trimWhitespace": function () {},
  "type": function () {},
  "uncheckedTemplate": function () {},
  "undo": function () {},
  "validator": function () {},
  "viewportColumnRenderingOffset": function () {},
  "viewportRowRenderingOffset": function () {},
  "visibleRows": function () {},
  "width": function () {},
  "wordWrap": function () {}
};
Handsontable.DropdownCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "allowKeyEventPropagation": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "flipDropdown": function () {},
  "flipDropdownIfNeeded": function () {},
  "focus": function () {},
  "getDropdownHeight": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "highlightBestMatchingChoice": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "limitDropdownIfNeeded": function () {},
  "open": function () {},
  "prepare": function () {},
  "queryChoices": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setDropdownHeight": function () {},
  "setValue": function () {},
  "unflipDropdown": function () {},
  "updateChoicesList": function () {},
  "updateDropdownHeight": function () {}
};
Handsontable.HandsontableCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.MergeCells.prototype = {
  "applySpanProperties": function () {},
  "canMergeRange": function () {},
  "mergeOrUnmergeSelection": function () {},
  "mergeRange": function () {},
  "mergeSelection": function () {},
  "modifyTransform": function () {},
  "shiftCollection": function () {},
  "unmergeSelection": function () {}
};
Handsontable.NumericCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.PasswordCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.TableView.prototype = {
  "appendColHeader": function () {},
  "appendRowHeader": function () {},
  "beforeRender": function () {},
  "destroy": function () {},
  "getCellAtCoords": function () {},
  "isCellEdited": function () {},
  "isSelectedOnlyCell": function () {},
  "isTextSelectionAllowed": function () {},
  "mainViewIsActive": function () {},
  "maximumVisibleElementHeight": function () {},
  "maximumVisibleElementWidth": function () {},
  "onDraw": function () {},
  "render": function () {},
  "scrollViewport": function () {},
  "updateCellHeader": function () {}
};
Handsontable.TextCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.TimeCell.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.UndoRedo.prototype = {
  "clear": function () {},
  "done": function () {},
  "isRedoAvailable": function () {},
  "isUndoAvailable": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.Action.prototype = {
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.CellAlignmentAction.prototype = {
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.ChangeAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.CreateColumnAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.CreateRowAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.FiltersAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.RemoveColumnAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.RemoveRowAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.UndoRedo.RowMoveAction.prototype = {
  "constructor": function () {},
  "redo": function () {},
  "undo": function () {}
};
Handsontable.cellTypes.autocomplete.editor.prototype = {
  "_fireCallbacks": function () {},
  "allowKeyEventPropagation": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "flipDropdown": function () {},
  "flipDropdownIfNeeded": function () {},
  "focus": function () {},
  "getDropdownHeight": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "highlightBestMatchingChoice": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "limitDropdownIfNeeded": function () {},
  "open": function () {},
  "prepare": function () {},
  "queryChoices": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setDropdownHeight": function () {},
  "setValue": function () {},
  "unflipDropdown": function () {},
  "updateChoicesList": function () {},
  "updateDropdownHeight": function () {}
};
Handsontable.cellTypes.checkbox.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.cellTypes.date.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "destroyElements": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getDatePickerConfig": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "hideDatepicker": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {},
  "showDatepicker": function () {}
};
Handsontable.cellTypes.dropdown.editor.prototype = {
  "_fireCallbacks": function () {},
  "allowKeyEventPropagation": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "flipDropdown": function () {},
  "flipDropdownIfNeeded": function () {},
  "focus": function () {},
  "getDropdownHeight": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "highlightBestMatchingChoice": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "limitDropdownIfNeeded": function () {},
  "open": function () {},
  "prepare": function () {},
  "queryChoices": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setDropdownHeight": function () {},
  "setValue": function () {},
  "unflipDropdown": function () {},
  "updateChoicesList": function () {},
  "updateDropdownHeight": function () {}
};
Handsontable.cellTypes.handsontable.editor.prototype = {
  "_fireCallbacks": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.cellTypes.numeric.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.cellTypes.password.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.cellTypes.text.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.cellTypes.time.editor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.AutocompleteEditor.prototype = {
  "_fireCallbacks": function () {},
  "allowKeyEventPropagation": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "flipDropdown": function () {},
  "flipDropdownIfNeeded": function () {},
  "focus": function () {},
  "getDropdownHeight": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "highlightBestMatchingChoice": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "limitDropdownIfNeeded": function () {},
  "open": function () {},
  "prepare": function () {},
  "queryChoices": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setDropdownHeight": function () {},
  "setValue": function () {},
  "unflipDropdown": function () {},
  "updateChoicesList": function () {},
  "updateDropdownHeight": function () {}
};
Handsontable.editors.BaseEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.CheckboxEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.DateEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "destroyElements": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getDatePickerConfig": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "hideDatepicker": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {},
  "showDatepicker": function () {}
};
Handsontable.editors.DropdownEditor.prototype = {
  "_fireCallbacks": function () {},
  "allowKeyEventPropagation": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "flipDropdown": function () {},
  "flipDropdownIfNeeded": function () {},
  "focus": function () {},
  "getDropdownHeight": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "highlightBestMatchingChoice": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "limitDropdownIfNeeded": function () {},
  "open": function () {},
  "prepare": function () {},
  "queryChoices": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setDropdownHeight": function () {},
  "setValue": function () {},
  "unflipDropdown": function () {},
  "updateChoicesList": function () {},
  "updateDropdownHeight": function () {}
};
Handsontable.editors.HandsontableEditor.prototype = {
  "_fireCallbacks": function () {},
  "assignHooks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.MobileEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getValue": function () {},
  "hideCellPointer": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "onBeforeKeyDown": function () {},
  "open": function () {},
  "prepare": function () {},
  "prepareAndSave": function () {},
  "saveValue": function () {},
  "scrollToView": function () {},
  "setValue": function () {},
  "updateEditorData": function () {},
  "updateEditorPosition": function () {},
  "valueChanged": function () {}
};
Handsontable.editors.NumericEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.PasswordEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.SelectEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "prepareOptions": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "registerHooks": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.editors.TextEditor.prototype = {
  "_fireCallbacks": function () {},
  "beginEditing": function () {},
  "bindEvents": function () {},
  "cancelChanges": function () {},
  "checkEditorSection": function () {},
  "close": function () {},
  "constructor": function () {},
  "createElements": function () {},
  "destroy": function () {},
  "discardEditor": function () {},
  "enableFullEditMode": function () {},
  "extend": function () {},
  "finishEditing": function () {},
  "focus": function () {},
  "getEditedCell": function () {},
  "getValue": function () {},
  "init": function () {},
  "isInFullEditMode": function () {},
  "isOpened": function () {},
  "isWaiting": function () {},
  "open": function () {},
  "prepare": function () {},
  "refreshDimensions": function () {},
  "refreshValue": function () {},
  "saveValue": function () {},
  "setValue": function () {}
};
Handsontable.plugins.AutoColumnSize.prototype = {
  "addHook": function () {},
  "calculateAllColumnsWidth": function () {},
  "calculateColumnsWidth": function () {},
  "callOnPluginsReady": function () {},
  "clearCache": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "findColumnsWhereHeaderWasChanged": function () {},
  "getColumnWidth": function () {},
  "getFirstVisibleColumn": function () {},
  "getLastVisibleColumn": function () {},
  "getSyncCalculationLimit": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "isNeedRecalculate": function () {},
  "onAfterInit": function () {},
  "onAfterLoadData": function () {},
  "onAfterPluginsInitialized": function () {},
  "onBeforeChange": function () {},
  "onBeforeColumnResize": function () {},
  "onBeforeRender": function () {},
  "onUpdateSettings": function () {},
  "recalculateAllColumnsWidth": function () {},
  "removeHooks": function () {},
  "setSamplingOptions": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.AutoRowSize.prototype = {
  "addHook": function () {},
  "calculateAllRowsHeight": function () {},
  "calculateRowsHeight": function () {},
  "callOnPluginsReady": function () {},
  "clearCache": function () {},
  "clearCacheByRange": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getColumnHeaderHeight": function () {},
  "getFirstVisibleRow": function () {},
  "getLastVisibleRow": function () {},
  "getRowHeight": function () {},
  "getSyncCalculationLimit": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "isNeedRecalculate": function () {},
  "onAfterLoadData": function () {},
  "onAfterPluginsInitialized": function () {},
  "onBeforeChange": function () {},
  "onBeforeRender": function () {},
  "onBeforeRowMove": function () {},
  "onBeforeRowResize": function () {},
  "onUpdateSettings": function () {},
  "recalculateAllRowsHeight": function () {},
  "removeHooks": function () {},
  "setSamplingOptions": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.Autofill.prototype = {
  "addHook": function () {},
  "addNewRowIfNeeded": function () {},
  "addRow": function () {},
  "addSelectionFromStartAreaToSpecificRowIndex": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "clearMappedSettings": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "fillIn": function () {},
  "getCoordsOfDragAndDropBorders": function () {},
  "getCornersOfSelectedCells": function () {},
  "getIfMouseWasDraggedOutside": function () {},
  "getIndexOfLastAdjacentFilledInRow": function () {},
  "getSelectionData": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "mapSettings": function () {},
  "onAfterCellCornerMouseDown": function () {},
  "onAfterPluginsInitialized": function () {},
  "onBeforeCellMouseOver": function () {},
  "onCellCornerDblClick": function () {},
  "onMouseMove": function () {},
  "onMouseUp": function () {},
  "onUpdateSettings": function () {},
  "redrawBorders": function () {},
  "reduceSelectionAreaIfNeeded": function () {},
  "registerEvents": function () {},
  "removeHooks": function () {},
  "resetSelectionOfDraggedArea": function () {},
  "selectAdjacent": function () {},
  "setSelection": function () {},
  "showBorder": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.BasePlugin.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "init": function () {},
  "onAfterPluginsInitialized": function () {},
  "onUpdateSettings": function () {},
  "removeHooks": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ColumnSorting.prototype = {
  "addHook": function () {},
  "afterCreateRow": function () {},
  "afterRemoveRow": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "dateSort": function () {},
  "defaultSort": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enableObserveChangesPlugin": function () {},
  "enablePlugin": function () {},
  "getColHeader": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "isSorted": function () {},
  "loadSortingState": function () {},
  "numericSort": function () {},
  "onAfterOnCellMouseDown": function () {},
  "onAfterPluginsInitialized": function () {},
  "onAfterUpdateSettings": function () {},
  "onUpdateSettings": function () {},
  "removeHooks": function () {},
  "saveSortingState": function () {},
  "setPluginOptions": function () {},
  "setSortingColumn": function () {},
  "sort": function () {},
  "sortByColumn": function () {},
  "sortBySettings": function () {},
  "translateRow": function () {},
  "untranslateRow": function () {},
  "updateOrderClass": function () {},
  "updatePlugin": function () {},
  "updateSortIndicator": function () {}
};
Handsontable.plugins.Comments.prototype = {
  "addHook": function () {},
  "addToContextMenu": function () {},
  "callOnPluginsReady": function () {},
  "checkSelectionCommentsConsistency": function () {},
  "clearHooks": function () {},
  "clearRange": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getComment": function () {},
  "getCommentAtCell": function () {},
  "getCommentMeta": function () {},
  "hide": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "onAfterBeginEditing": function () {},
  "onAfterPluginsInitialized": function () {},
  "onAfterRenderer": function () {},
  "onContextMenuAddComment": function () {},
  "onContextMenuMakeReadOnly": function () {},
  "onContextMenuRemoveComment": function () {},
  "onEditorBlur": function () {},
  "onEditorMouseDown": function () {},
  "onEditorMouseUp": function () {},
  "onMouseDown": function () {},
  "onMouseOver": function () {},
  "onMouseUp": function () {},
  "onUpdateSettings": function () {},
  "refreshEditor": function () {},
  "registerListeners": function () {},
  "removeComment": function () {},
  "removeCommentAtCell": function () {},
  "removeHooks": function () {},
  "setComment": function () {},
  "setCommentAtCell": function () {},
  "setRange": function () {},
  "show": function () {},
  "showAtCell": function () {},
  "targetIsCellWithComment": function () {},
  "targetIsCommentTextArea": function () {},
  "updateCommentMeta": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ContextMenu.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "close": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "executeCommand": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "onAfterPluginsInitialized": function () {},
  "onContextMenu": function () {},
  "onMenuAfterClose": function () {},
  "onMenuAfterOpen": function () {},
  "onUpdateSettings": function () {},
  "open": function () {},
  "registerEvents": function () {},
  "removeHooks": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ContextMenuCopyPaste.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getCopyValue": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "onAfterContextMenuDefaultOptions": function () {},
  "onAfterContextMenuShow": function () {},
  "onAfterPluginsInitialized": function () {},
  "onUpdateSettings": function () {},
  "registerEvents": function () {},
  "removeCurrentClass": function () {},
  "removeHooks": function () {},
  "removeZeroClipboardClass": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.DragToScroll.prototype = {
  "check": function () {},
  "setBoundaries": function () {},
  "setCallback": function () {}
};
Handsontable.plugins.ManualColumnFreeze.prototype = {
  "addContextMenuEntry": function () {},
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "freezeColumn": function () {},
  "getBestColumnReturnPosition": function () {},
  "getMovePlugin": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "onAfterInit": function () {},
  "onAfterPluginsInitialized": function () {},
  "onBeforeColumnMove": function () {},
  "onUpdateSettings": function () {},
  "removeHooks": function () {},
  "unfreezeColumn": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ManualColumnMove.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "changeSelection": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getColumnsWidth": function () {},
  "init": function () {},
  "initialSettings": function () {},
  "isEnabled": function () {},
  "isFixedColumnsLeft": function () {},
  "moveColumn": function () {},
  "moveColumns": function () {},
  "onAfterCreateCol": function () {},
  "onAfterLoadData": function () {},
  "onAfterPluginsInitialized": function () {},
  "onAfterRemoveCol": function () {},
  "onAfterScrollVertically": function () {},
  "onBeforeOnCellMouseDown": function () {},
  "onBeforeOnCellMouseOver": function () {},
  "onBeforeRemoveCol": function () {},
  "onModifyCol": function () {},
  "onMouseMove": function () {},
  "onMouseUp": function () {},
  "onUnmodifyCol": function () {},
  "onUpdateSettings": function () {},
  "persistentStateLoad": function () {},
  "persistentStateSave": function () {},
  "prepareColumnsToMoving": function () {},
  "refreshPositions": function () {},
  "registerEvents": function () {},
  "removeHooks": function () {},
  "unregisterEvents": function () {},
  "updateColumnsMapper": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ManualColumnResize.prototype = {
  "addHook": function () {},
  "afterMouseDownTimeout": function () {},
  "bindEvents": function () {},
  "callOnPluginsReady": function () {},
  "checkIfColumnHeader": function () {},
  "clearHooks": function () {},
  "clearManualSize": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getTHFromTargetElement": function () {},
  "hideHandleAndGuide": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "loadManualColumnWidths": function () {},
  "onAfterPluginsInitialized": function () {},
  "onBeforeColumnResize": function () {},
  "onBeforeStretchingColumnWidth": function () {},
  "onModifyColWidth": function () {},
  "onMouseDown": function () {},
  "onMouseMove": function () {},
  "onMouseOver": function () {},
  "onMouseUp": function () {},
  "onUpdateSettings": function () {},
  "refreshGuidePosition": function () {},
  "refreshHandlePosition": function () {},
  "removeHooks": function () {},
  "saveManualColumnWidths": function () {},
  "setManualSize": function () {},
  "setupGuidePosition": function () {},
  "setupHandlePosition": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ManualRowMove.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "changeSelection": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getRowsHeight": function () {},
  "init": function () {},
  "initialSettings": function () {},
  "isEnabled": function () {},
  "isFixedRowBottom": function () {},
  "isFixedRowTop": function () {},
  "moveRow": function () {},
  "moveRows": function () {},
  "onAfterCreateRow": function () {},
  "onAfterLoadData": function () {},
  "onAfterPluginsInitialized": function () {},
  "onAfterRemoveRow": function () {},
  "onAfterScrollHorizontally": function () {},
  "onBeforeColumnSort": function () {},
  "onBeforeOnCellMouseDown": function () {},
  "onBeforeOnCellMouseOver": function () {},
  "onBeforeRemoveRow": function () {},
  "onModifyRow": function () {},
  "onMouseMove": function () {},
  "onMouseUp": function () {},
  "onUnmodifyRow": function () {},
  "onUpdateSettings": function () {},
  "persistentStateLoad": function () {},
  "persistentStateSave": function () {},
  "prepareRowsToMoving": function () {},
  "refreshPositions": function () {},
  "registerEvents": function () {},
  "removeHooks": function () {},
  "unregisterEvents": function () {},
  "updatePlugin": function () {},
  "updateRowsMapper": function () {}
};
Handsontable.plugins.ManualRowResize.prototype = {
  "addHook": function () {},
  "afterMouseDownTimeout": function () {},
  "bindEvents": function () {},
  "callOnPluginsReady": function () {},
  "checkIfRowHeader": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getTHFromTargetElement": function () {},
  "hideHandleAndGuide": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "loadManualRowHeights": function () {},
  "onAfterPluginsInitialized": function () {},
  "onModifyRowHeight": function () {},
  "onMouseDown": function () {},
  "onMouseMove": function () {},
  "onMouseOver": function () {},
  "onMouseUp": function () {},
  "onUpdateSettings": function () {},
  "refreshGuidePosition": function () {},
  "refreshHandlePosition": function () {},
  "removeHooks": function () {},
  "saveManualRowHeights": function () {},
  "setManualSize": function () {},
  "setupGuidePosition": function () {},
  "setupHandlePosition": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.MultipleSelectionHandles.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "getCurrentRangeCoords": function () {},
  "init": function () {},
  "isDragged": function () {},
  "isEnabled": function () {},
  "onAfterPluginsInitialized": function () {},
  "onUpdateSettings": function () {},
  "registerListeners": function () {},
  "removeHooks": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.ObserveChanges.prototype = {
  "_deletePublicApi": function () {},
  "_exposePublicApi": function () {},
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "onAfterLoadData": function () {},
  "onAfterPluginsInitialized": function () {},
  "onAfterTableAlter": function () {},
  "onDataChange": function () {},
  "onUpdateSettings": function () {},
  "removeHooks": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.TouchScroll.prototype = {
  "addHook": function () {},
  "callOnPluginsReady": function () {},
  "clearHooks": function () {},
  "destroy": function () {},
  "disablePlugin": function () {},
  "enablePlugin": function () {},
  "init": function () {},
  "isEnabled": function () {},
  "onAfterMomentumScroll": function () {},
  "onAfterPluginsInitialized": function () {},
  "onAfterRender": function () {},
  "onBeforeTouchScroll": function () {},
  "onUpdateSettings": function () {},
  "registerEvents": function () {},
  "removeHooks": function () {},
  "updatePlugin": function () {}
};
Handsontable.plugins.utils.Cursor.prototype = {
  "fitsAbove": function () {},
  "fitsBelow": function () {},
  "fitsOnLeft": function () {},
  "fitsOnRight": function () {},
  "getSourceType": function () {}
};
Handsontable.utils.GhostTable.prototype = {
  "addColumn": function () {},
  "addColumnHeadersRow": function () {},
  "addRow": function () {},
  "clean": function () {},
  "createCol": function () {},
  "createColElement": function () {},
  "createColGroupsCol": function () {},
  "createColumnHeadersRow": function () {},
  "createContainer": function () {},
  "createRow": function () {},
  "createTable": function () {},
  "getHeights": function () {},
  "getSetting": function () {},
  "getSettings": function () {},
  "getWidths": function () {},
  "injectTable": function () {},
  "isHorizontal": function () {},
  "isVertical": function () {},
  "removeTable": function () {},
  "setSetting": function () {},
  "setSettings": function () {}
};
Handsontable.utils.Hooks.prototype = {
  "add": function () {},
  "createEmptyBucket": function () {},
  "deregister": function () {},
  "destroy": function () {},
  "getBucket": function () {},
  "getRegistered": function () {},
  "has": function () {},
  "isRegistered": function () {},
  "once": function () {},
  "register": function () {},
  "remove": function () {},
  "run": function () {}
};
Handsontable.utils.Interval.prototype = {
  "__callback": function () {},
  "start": function () {},
  "stop": function () {}
};
Handsontable.utils.LinkedList.prototype = {
  "hasCycle": function () {},
  "inorder": function () {},
  "pop": function () {},
  "push": function () {},
  "recursiveReverse": function () {},
  "remove": function () {},
  "reverse": function () {},
  "shift": function () {},
  "unshift": function () {}
};
Handsontable.utils.ManualColumnMoveColumnsMapper.prototype = {
  "clearMap": function () {},
  "clearNull": function () {},
  "createMap": function () {},
  "destroy": function () {},
  "getIndexByValue": function () {},
  "getValueByIndex": function () {},
  "insertItems": function () {},
  "moveColumn": function () {},
  "removeItems": function () {},
  "shiftItems": function () {},
  "unshiftItems": function () {}
};
Handsontable.utils.ManualRowMoveRowsMapper.prototype = {
  "clearMap": function () {},
  "clearNull": function () {},
  "createMap": function () {},
  "destroy": function () {},
  "getIndexByValue": function () {},
  "getValueByIndex": function () {},
  "insertItems": function () {},
  "moveRow": function () {},
  "removeItems": function () {},
  "shiftItems": function () {},
  "unshiftItems": function () {}
};
Handsontable.utils.RecordTranslator.prototype = {
  "toPhysical": function () {},
  "toPhysicalColumn": function () {},
  "toPhysicalRow": function () {},
  "toVisual": function () {},
  "toVisualColumn": function () {},
  "toVisualRow": function () {}
};
Handsontable.utils.SamplesGenerator.prototype = {
  "generateColumnSamples": function () {},
  "generateRowSamples": function () {},
  "generateSample": function () {},
  "generateSamples": function () {},
  "getSampleCount": function () {},
  "setAllowDuplicates": function () {},
  "setSampleCount": function () {}
};
/**********************************************************************
 * End Generated Extern for Handsontable
/**********************************************************************/

Handsontable.prototype = {
  addHook: function() {},
  addHookOnce: function() {},
  alter: function() {},
  clear: function() {},
  colOffset: function() {},
  colToProp: function() {},
  countCols: function() {},
  countEmptyCols: function() {},
  countEmptyRows: function() {},
  countRenderedCols: function() {},
  countRenderedRows: function() {},
  countRows: function() {},
  countSourceCols: function() {},
  countSourceRows: function() {},
  countVisibleCols: function() {},
  countVisibleRows: function() {},
  deselectCell: function() {},
  destroy: function() {},
  destroyEditor: function() {},
  getActiveEditor: function() {},
  getCell: function() {},
  getCellEditor: function() {},
  getCellMeta: function() {},
  getCellMetaAtRow: function() {},
  getCellRenderer: function() {},
  getCellValidator: function() {},
  getColHeader: function() {},
  getColWidth: function() {},
  getCoords: function() {},
  getCopyableData: function() {},
  getCopyableText: function() {},
  getData: function() {},
  getDataAtCell: function() {},
  getDataAtCol: function() {},
  getDataAtProp: function() {},
  getDataAtRow: function() {},
  getDataAtRowProp: function() {},
  getDataType: function() {},
  getInstance: function() {},
  getPlugin: function() {},
  getRowHeader: function() {},
  getRowHeight: function() {},
  getSchema: function() {},
  getSelected: function() {},
  getSelectedRange: function() {},
  getSettings: function() {},
  getSourceData: function() {},
  getSourceDataArray: function() {},
  getSourceDataAtCell: function() {},
  getSourceDataAtCol: function() {},
  getSourceDataAtRow: function() {},
  getValue: function() {},
  hasColHeaders: function() {},
  hasHook: function() {},
  hasRowHeaders: function() {},
  isEmptyCol: function() {},
  isEmptyRow: function() {},
  isListening: function() {},
  listen: function() {},
  loadData: function() {},
  populateFromArray: function() {},
  propToCol: function() {},
  removeCellMeta: function() {},
  removeHook: function() {},
  render: function() {},
  rowOffset: function() {},
  runHooks: function() {},
  scrollViewportTo: function() {},
  selectCell: function() {},
  selectCellByProp: function() {},
  setCellMeta: function() {},
  setCellMetaObject: function() {},
  setDataAtCell: function() {},
  setDataAtRowProp: function() {},
  spliceCol: function() {},
  spliceRow: function() {},
  toPhysicalColumn: function() {},
  toPhysicalRow: function() {},
  toVisualColumn: function() {},
  toVisualRow: function() {},
  unlisten: function() {},
  updateSettings: function() {},
  validateCells: function() {},
}